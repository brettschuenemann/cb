class Deferred {
    constructor() {
        this.resolve = (value) => {
            this._resolve(value);
        };
        this.reject = (reason) => {
            this._reject(reason);
        };
        this._promise = new Promise((resolve, reject) => {
            this._resolve = resolve;
            this._reject = reject;
        });
    }
    get promise() {
        return this._promise;
    }
}

/**
 * getParameterByName
 */
function getParameterByName(name, url = '') {
    if (!url) {
        url = window.location.href;
    }
    name = name.replace(/[[]]/g, '\\$&');
    const regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)');
    const results = regex.exec(url);
    if (!results || !results[2]) {
        return '';
    }
    return decodeURIComponent(results[2].replace(/\+/g, ' '));
}

class PWSDK {
    constructor(origin, instanceId) {
        this.origin = origin;
        this.instanceId = instanceId;
        this.deferred = {};
        this.events = {};
        if (window.top === window) {
            throw new Error('PWSDK can only work inside an iframe');
        }
        window.addEventListener('message', (event) => {
            if (event.origin === this.origin) {
                if (this.deferred.getContext) {
                    this.deferred.getContext.resolve(event.data);
                    this.deferred.getContext = null;
                }
            }
            switch (event.data.type) {
                case 'closeWindow':
                    this.trigger('closeWindow', 'hey');
                    break;
                case 'addButtonClicked':
                    this.trigger('addButtonClicked');
                    break;
                case 'addNewConversation':
                    this.trigger('addNewConversation', event.data);
                    break;
                default:
                    break;
            }
        }, false);
    }
    static init() {
        const origin = getParameterByName('origin');
        const instanceId = getParameterByName('instanceId');
        return new PWSDK(origin, instanceId);
    }
    postMessage(message) {
        window.top.postMessage(Object.assign({ instanceId: this.instanceId }, message), this.origin);
    }
    getContext() {
        this.deferred.getContext = new Deferred();
        this.postMessage({
            type: 'getContext',
        });
        return this.deferred.getContext.promise;
    }
    setAppUI(data) {
        return new Promise((resolve) => {
            this.deferred.setAppUI = { resolve };
            this.postMessage({
                type: 'setUI',
                data,
            });
        });
    }
    showModal(params = {}) {
        this.postMessage({
            type: 'showModal',
            params,
        });
    }
    closeModal() {
        this.postMessage({
            type: 'closeModal',
        });
    }
    proxyMessage(target, data = {}) {
        this.postMessage({
            type: 'proxyMessage',
            target,
            data,
        });
    }
    on(eventName, cb) {
        if (!this.events[eventName]) {
            this.events[eventName] = [];
        }
        this.events[eventName].push(cb);
    }
    trigger(eventName, ...args) {
        if (this.events[eventName]) {
            this.events[eventName].forEach((cb) => {
                cb.call(this, ...args);
            });
        }
    }
}

export default PWSDK;

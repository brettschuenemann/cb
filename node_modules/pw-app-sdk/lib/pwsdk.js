'use strict';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

var __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
};

var Deferred = /** @class */ (function () {
    function Deferred() {
        var _this = this;
        this.resolve = function (value) {
            _this._resolve(value);
        };
        this.reject = function (reason) {
            _this._reject(reason);
        };
        this._promise = new Promise(function (resolve, reject) {
            _this._resolve = resolve;
            _this._reject = reject;
        });
    }
    Object.defineProperty(Deferred.prototype, "promise", {
        get: function () {
            return this._promise;
        },
        enumerable: true,
        configurable: true
    });
    return Deferred;
}());

/**
 * getParameterByName
 */
function getParameterByName(name, url) {
    if (url === void 0) { url = ''; }
    if (!url) {
        url = window.location.href;
    }
    name = name.replace(/[[]]/g, '\\$&');
    var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)');
    var results = regex.exec(url);
    if (!results || !results[2]) {
        return '';
    }
    return decodeURIComponent(results[2].replace(/\+/g, ' '));
}

var PWSDK = /** @class */ (function () {
    function PWSDK(origin, instanceId) {
        var _this = this;
        this.origin = origin;
        this.instanceId = instanceId;
        this.deferred = {};
        this.events = {};
        if (window.top === window) {
            throw new Error('PWSDK can only work inside an iframe');
        }
        window.addEventListener('message', function (event) {
            if (event.origin === _this.origin) {
                if (_this.deferred.getContext) {
                    _this.deferred.getContext.resolve(event.data);
                    _this.deferred.getContext = null;
                }
            }
            switch (event.data.type) {
                case 'closeWindow':
                    _this.trigger('closeWindow', 'hey');
                    break;
                case 'addButtonClicked':
                    _this.trigger('addButtonClicked');
                    break;
                case 'addNewConversation':
                    _this.trigger('addNewConversation', event.data);
                    break;
                default:
                    break;
            }
        }, false);
    }
    PWSDK.init = function () {
        var origin = getParameterByName('origin');
        var instanceId = getParameterByName('instanceId');
        return new PWSDK(origin, instanceId);
    };
    PWSDK.prototype.postMessage = function (message) {
        window.top.postMessage(__assign({ instanceId: this.instanceId }, message), this.origin);
    };
    PWSDK.prototype.getContext = function () {
        this.deferred.getContext = new Deferred();
        this.postMessage({
            type: 'getContext',
        });
        return this.deferred.getContext.promise;
    };
    PWSDK.prototype.setAppUI = function (data) {
        var _this = this;
        return new Promise(function (resolve) {
            _this.deferred.setAppUI = { resolve: resolve };
            _this.postMessage({
                type: 'setUI',
                data: data,
            });
        });
    };
    PWSDK.prototype.showModal = function (params) {
        if (params === void 0) { params = {}; }
        this.postMessage({
            type: 'showModal',
            params: params,
        });
    };
    PWSDK.prototype.closeModal = function () {
        this.postMessage({
            type: 'closeModal',
        });
    };
    PWSDK.prototype.proxyMessage = function (target, data) {
        if (data === void 0) { data = {}; }
        this.postMessage({
            type: 'proxyMessage',
            target: target,
            data: data,
        });
    };
    PWSDK.prototype.on = function (eventName, cb) {
        if (!this.events[eventName]) {
            this.events[eventName] = [];
        }
        this.events[eventName].push(cb);
    };
    PWSDK.prototype.trigger = function (eventName) {
        var _this = this;
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (this.events[eventName]) {
            this.events[eventName].forEach(function (cb) {
                cb.call.apply(cb, [_this].concat(args));
            });
        }
    };
    return PWSDK;
}());

module.exports = PWSDK;
